HAVE_STATIC_DUMMY ?= 0
ifeq ($(TARGET),)
ifeq ($(LIBRETRO),)
TARGET := retroarch.js
else
TARGET := $(LIBRETRO)_libretro.js
endif
endif

EOPT = USE_ZLIB=1 # Emscripten specific options
EOPTS = $(addprefix -s $(EMPTY), $(EOPT)) # Add '-s ' to each option

OS = Emscripten
OBJ :=

HAVE_DSP_FILTER = 1
HAVE_VIDEO_FILTER = 1
HAVE_OVERLAY = 1
HAVE_GLSL = 1
HAVE_SCREENSHOTS = 1
HAVE_REWIND = 1
HAVE_AUDIOMIXER = 1
HAVE_VIDEO_LAYOUT = 0
HAVE_CC_RESAMPLER = 1
HAVE_EGL    = 1
HAVE_RJPEG  = 0
HAVE_RPNG   = 1
HAVE_EMSCRIPTEN = 1
HAVE_MENU = 1
HAVE_GFX_WIDGETS = 1
HAVE_RGUI = 1
HAVE_SDL = 0
HAVE_SDL2 = 0
HAVE_ZLIB = 1
HAVE_SHADERPIPELINE = 1
HAVE_STATIC_VIDEO_FILTERS = 1
HAVE_STATIC_AUDIO_FILTERS = 1
HAVE_STB_FONT = 1
HAVE_CONFIGFILE = 1
HAVE_CHEATS = 1
HAVE_IBXM = 1
HAVE_CORE_INFO_CACHE = 1
HAVE_7ZIP = 1


ASYNC ?= 0
PTHREAD ?= 0
LTO ?= 0
WASM ?= 1
DEBUG ?= 0

DEFINES := -DRARCH_INTERNAL -DHAVE_MAIN
DEFINES += -DHAVE_FILTERS_BUILTIN -DNO_MISSING_ASSET_WARNING -DNO_AUTO_CANVAS_RESIZE -DWEB_SCALING -DNO_CANVAS_FULLSCREEN -DNO_INITIAL_CANVAS_RESIZE

HAVE_OPENGL = 0 # not supported
EM_OPENGL ?= 0
HAVE_REGAL ?= 0

HAVE_OPENGLES ?= 1
HAVE_OPENGLES3 ?= 0 #3D cores only

GL_DEBUG ?= 0 # help diagnose GLSL problems (can cause errors in normal operation)
GENERATE_SOURCEMAP ?= 0
FS_DEBUG = 0

# default value: 5242880  (5 MiB)
STACK_MEMORY ?= 8388608
# default value: 16777216 (16 MiB)
HEAP_MEMORY ?= 536870912

# 8388608 ----- 8 MiB (Stack: recommended)
# 16777216 ---- 16 MiB
# 33554432 ---- 32 MiB
# 67108864 ---- 64 MiB
# 134217728 --- 128 MiB
# 268435456 --- 256 MiB (Heap: recommended) (Stack: recommended for some cores [mupen64plus_next])
# 536870912 --- 512 MiB (Heap: needed for some cores [mednafen_psx(_hw), mupen64plus_next])
# 1073741824 -- 1 GiB
# 1610612736 -- 1.5 GiB
# 2147483648 -- 2 GiB

PRECISE_F32 = 1

OBJDIR := obj-emscripten

#if you compile with SDL2 flag add this Emscripten flag "-s USE_SDL=2" to LDFLAGS:

ifeq ($(HAVE_SDL2), 1)
   LIBS += -s USE_SDL=2
   DEFINES += -DHAVE_SDL2
endif

LIBS    := -s USE_ZLIB=1
LDFLAGS := -L. --no-heap-copy $(LIBS) -s TOTAL_STACK=$(STACK_MEMORY) -s TOTAL_MEMORY=$(HEAP_MEMORY) -s NO_EXIT_RUNTIME=0 -s EXPORTED_RUNTIME_METHODS="['callMain', 'cwrap', 'getValue', 'FS']" -s EXPORTED_FUNCTIONS=$(EXPORTED_FUNCTIONS) \
           -s EXPORTED_FUNCTIONS=['_main','_malloc','_load_state','_set_volume','_set_variable','_simulate_input','_shader_enable','_get_state_info','_save_state_info','_set_cheat','_cmd_take_screenshot','_system_restart','_get_current_frame_count','_cmd_savefiles','_get_core_options','_cmd_save_state','_supports_states','_reset_cheat','_toggleMainLoop'] \
           -lidbfs.js \
           -s ERROR_ON_UNDEFINED_SYMBOLS=0 \
           -s DISABLE_DEPRECATED_FIND_EVENT_TARGET_BEHAVIOR=0 \
           -s ALLOW_MEMORY_GROWTH=1 \
           --js-library emscripten/library_rwebaudio.js \
           --js-library emscripten/library_rwebcam.js \
           --js-library emscripten/library_errno_codes.js



ifeq ($(HAVE_OPENGLES), 1)
   ifeq ($(HAVE_OPENGLES3), 1)
      LDFLAGS += -s FULL_ES3=1 -s MIN_WEBGL_VERSION=2 -s MAX_WEBGL_VERSION=2
   else
      LDFLAGS += -s FULL_ES2=1
   endif
endif
ifeq ($(EM_OPENGL), 1)
   DEFINES += -DEM_OPENGL
   ifeq ($(HAVE_REGAL), 1)
      LDFLAGS += -s USE_REGAL=1
      DEFINES += -DHAVE_REGAL
   else
      LDFLAGS += -s LEGACY_GL_EMULATION=1 -s GL_UNSAFE_OPTS=0
   endif
endif

ifeq ($(GL_DEBUG), 1)
   LDFLAGS += -s GL_ASSERTIONS=1 -s GL_DEBUG=1
endif

ifeq ($(FS_DEBUG), 1)
   LDFLAGS += -s FS_DEBUG=1
endif

ifneq ($(PTHREAD), 0)
   CFLAGS += -pthread
   CXXFLAGS += -pthread
   LDFLAGS += -pthread -s PTHREAD_POOL_SIZE=4
else
   LDFLAGS += -s ALLOW_MEMORY_GROWTH=1
endif

ifeq ($(ASYNC), 1)
   LDFLAGS += -s ASYNCIFY=1 -s ASYNCIFY_STACK_SIZE=131072
endif

ifeq ($(GENERATE_SOURCEMAP), 1)
   CFLAGS += -g4
   CXXFLAGS += -g4
   LDFLAGS += -g4 --source-map-base http://localhost:8000/cores/ # -gsource-map
endif

include Makefile.common

CFLAGS += $(DEF_FLAGS) -Ideps -Ideps/stb

libretro :=

ifeq ($(HAVE_STATIC_DUMMY),1)
  DEFINES += -DHAVE_STATIC_DUMMY
else
  libretro += libretro_emscripten.bc
endif

ifneq ($(V), 1)
   Q := @
endif

ifeq ($(WASM), 1)
   LDFLAGS += -s WASM=1
else
   LDFLAGS += -s WASM=0
endif

ifeq ($(DEBUG), 1)
   LDFLAGS += -O0 -g -s ASSERTIONS=2
   CFLAGS += -O0 -g
else
   LDFLAGS += -O3
   # WARNING: some optimizations can break some cores (ex: LTO breaks tyrquake)
   LDFLAGS += -s PRECISE_F32=$(PRECISE_F32)
   ifeq ($(LTO), 1)
      LDFLAGS += --llvm-lto 3
   endif
   CFLAGS += -O3
endif

CFLAGS += -Wall -Wunused-function -Wno-unused-command-line-argument -I. -Ilibretro-common/include -std=gnu99 $(LIBS) -s EXPORTED_FUNCTIONS=$(EXPORTED_FUNCTIONS)

RARCH_OBJ := $(addprefix $(OBJDIR)/,$(OBJ))

all: $(TARGET)

$(TARGET): $(RARCH_OBJ) $(libretro)
	@$(if $(Q), $(shell echo echo LD $@),)
	$(Q)$(LD) -o $@ $(RARCH_OBJ) $(libretro) $(LIBS) $(LDFLAGS)

$(OBJDIR)/%.o: %.c
	@mkdir -p $(dir $@)
	@$(if $(Q), $(shell echo echo CC $<),)
	$(Q)$(CC) $(CFLAGS) $(DEFINES) $(EOPTS) -c -o $@ $<

$(OBJDIR)/%.o: %.cpp
	@mkdir -p $(dir $@)
	@$(if $(Q), $(shell echo echo CXX $<),)
	$(Q)$(CXX) $(CXXFLAGS) $(DEFINES) $(EOPTS) -c -o $@ $<

clean:
	#rm -rf $(OBJDIR)
	rm -f $(TARGET)

.PHONY: all clean
